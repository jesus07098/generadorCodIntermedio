package Interfaz;

import Generador.Buscador;
import Generador.CodigoIntermedio;
import Generador.vizCodigo;
import Lexico.AnalizadorLexico;
import Lexico.Pintar;
import Semantico.AnalizadorSemantico;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import Sintactico.AnalizadorSintactico;
import java.io.IOException;

import java.io.Reader;
import java.io.StringReader;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.nio.file.Paths;
import Sintactico.Nodo;
import java.awt.Color;
import java.awt.Point;

import java.io.FileWriter;
import java.io.PrintWriter;
import java.nio.file.Path;
import javax.swing.JTextPane;

import javax.swing.text.BadLocationException;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.io.UnsupportedEncodingException;
import java_cup.runtime.Scanner;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JScrollBar;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;

/**
 *
 * @author Jose
 */
public class Interfaz extends javax.swing.JFrame {

    int conLinea = 1;
    int linea = 0;
    Nodo arbolSintactico;

    public Interfaz() {
        initComponents();
        this.setLocationRelativeTo(null);
        PnlToken.setVisible(false);
        txtCode.requestFocus();
        btnArbolSintaxis.setVisible(false);
        //consola.setVisible(false);

        splitPaneCentral.getBottomComponent().setVisible(false);
        splitPaneEC.getRightComponent().setVisible(false);

        SimpleAttributeSet attribs = new SimpleAttributeSet();
        StyleConstants.setAlignment(attribs, StyleConstants.ALIGN_RIGHT);
        StyleConstants.setForeground(attribs, Color.white);
        StyleConstants.setBold(attribs, true);
        txtNumLinea.setParagraphAttributes(attribs, true);

        ThreadNumberCode nC = new ThreadNumberCode();
        nC.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem14 = new javax.swing.JMenuItem();
        splitPaneCentral = new javax.swing.JSplitPane();
        panelEditor = new javax.swing.JPanel();
        splitPaneEC = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        txtCode = new javax.swing.JTextPane();
        txtNumLinea = new javax.swing.JTextPane();
        PnlToken = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TblAnalisis = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        consola = new javax.swing.JPanel();
        PanelControlesSintactico = new javax.swing.JPanel();
        btnArbolSintaxis = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtErrores = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();

        jMenu6.setText("File");
        jMenuBar2.add(jMenu6);

        jMenu7.setText("Edit");
        jMenuBar2.add(jMenu7);

        jMenuItem14.setText("jMenuItem14");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JESUS CIRINEO JÁQUEZ 1-17-0172");
        setSize(new java.awt.Dimension(800, 600));
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        splitPaneCentral.setBorder(null);
        splitPaneCentral.setDividerSize(2);
        splitPaneCentral.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        panelEditor.setAutoscrolls(true);
        panelEditor.setPreferredSize(new java.awt.Dimension(458, 500));
        panelEditor.setLayout(new java.awt.BorderLayout());

        splitPaneEC.setDividerLocation(200);
        splitPaneEC.setDividerSize(2);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(400, 19));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(400, 52));

        jPanel2.setLayout(new java.awt.BorderLayout());

        txtCode.setFont(new java.awt.Font("Franklin Gothic Book", 1, 14)); // NOI18N
        txtCode.setSelectionColor(new java.awt.Color(0, 51, 255));
        txtCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodeKeyTyped(evt);
            }
        });
        jPanel2.add(txtCode, java.awt.BorderLayout.CENTER);

        txtNumLinea.setEditable(false);
        txtNumLinea.setBackground(new java.awt.Color(255, 0, 0));
        txtNumLinea.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtNumLinea.setText("1");
        txtNumLinea.setAlignmentX(0.2F);
        txtNumLinea.setMargin(new java.awt.Insets(8, 8, 8, 8));
        txtNumLinea.setMinimumSize(new java.awt.Dimension(14, 25));
        txtNumLinea.setPreferredSize(new java.awt.Dimension(30, 50));
        jPanel2.add(txtNumLinea, java.awt.BorderLayout.LINE_START);
        txtNumLinea.getAccessibleContext().setAccessibleName("");

        jScrollPane2.setViewportView(jPanel2);

        splitPaneEC.setLeftComponent(jScrollPane2);

        PnlToken.setPreferredSize(new java.awt.Dimension(400, 100));
        PnlToken.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("TOKENS"));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 436));

        TblAnalisis.setBackground(new java.awt.Color(102, 102, 102));
        TblAnalisis.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        TblAnalisis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "LINEA", "TOKEN", "COMPONENTE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TblAnalisis.setGridColor(new java.awt.Color(255, 153, 153));
        TblAnalisis.setInheritsPopupMenu(true);
        TblAnalisis.setMinimumSize(new java.awt.Dimension(100, 0));
        TblAnalisis.setSelectionBackground(new java.awt.Color(255, 102, 102));
        jScrollPane1.setViewportView(TblAnalisis);
        if (TblAnalisis.getColumnModel().getColumnCount() > 0) {
            TblAnalisis.getColumnModel().getColumn(0).setResizable(false);
            TblAnalisis.getColumnModel().getColumn(1).setResizable(false);
        }

        PnlToken.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setPreferredSize(new java.awt.Dimension(20, 100));
        jPanel1.setLayout(new java.awt.GridLayout(20, 0, 0, 2));
        PnlToken.add(jPanel1, java.awt.BorderLayout.LINE_START);

        splitPaneEC.setRightComponent(PnlToken);

        panelEditor.add(splitPaneEC, java.awt.BorderLayout.CENTER);

        splitPaneCentral.setTopComponent(panelEditor);

        consola.setPreferredSize(new java.awt.Dimension(10, 100));
        consola.setLayout(new java.awt.BorderLayout());

        PanelControlesSintactico.setBackground(new java.awt.Color(102, 102, 102));
        PanelControlesSintactico.setMinimumSize(new java.awt.Dimension(0, 24));

        btnArbolSintaxis.setBackground(new java.awt.Color(255, 153, 153));
        btnArbolSintaxis.setText("ARBOL SINTÁCTICO");
        btnArbolSintaxis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArbolSintaxisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelControlesSintacticoLayout = new javax.swing.GroupLayout(PanelControlesSintactico);
        PanelControlesSintactico.setLayout(PanelControlesSintacticoLayout);
        PanelControlesSintacticoLayout.setHorizontalGroup(
            PanelControlesSintacticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelControlesSintacticoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnArbolSintaxis, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        PanelControlesSintacticoLayout.setVerticalGroup(
            PanelControlesSintacticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnArbolSintaxis, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
        );

        consola.add(PanelControlesSintactico, java.awt.BorderLayout.PAGE_START);

        txtErrores.setEditable(false);
        txtErrores.setBorder(javax.swing.BorderFactory.createTitledBorder("CONSOLA"));
        txtErrores.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jScrollPane3.setViewportView(txtErrores);
        txtErrores.getAccessibleContext().setAccessibleName("consola");

        consola.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        splitPaneCentral.setBottomComponent(consola);

        getContentPane().add(splitPaneCentral, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(255, 204, 204));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuBar1.setAutoscrolls(true);
        jMenuBar1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jMenu1.setBackground(new java.awt.Color(0, 0, 0));
        jMenu1.setText("ARCHIVOS");

        jMenuItem1.setText("Abrir archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setBackground(new java.awt.Color(0, 0, 0));
        jMenu2.setText("ANALIZADORES");

        jMenuItem2.setText("Análisis Lexico");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Análisis Sintáctico");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem13.setText("Análisis Semantico");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem13);

        jMenuBar1.add(jMenu2);

        jMenu5.setBackground(new java.awt.Color(0, 0, 0));
        jMenu5.setText("CODIGO INTERMEDIO");

        jMenuItem16.setText("Código intermedio");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem16);

        jMenuBar1.add(jMenu5);

        jMenu4.setBackground(new java.awt.Color(0, 0, 0));
        jMenu4.setText("VENTANAS");

        jMenuItem11.setText("Consola");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuItem12.setText("Tokens");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem12);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String aux = "";
        String texto = "";
        boolean existe;
        String direccion;
        try {
            // llamamos el metodo que permite cargar la ventana
            JFileChooser fc = new JFileChooser();
            FileNameExtensionFilter filtro = new FileNameExtensionFilter(".txt", "txt");
            fc.setFileFilter(filtro);
            fc.showOpenDialog(fc);
            File abre = fc.getSelectedFile();
            fc.addChoosableFileFilter(filtro);

            int status = 0;
            if (abre.getName().endsWith(".txt")) {
                if (fc != null) {

                    FileReader archivos = new FileReader(abre);

                    BufferedReader lee = new BufferedReader(archivos);
                    while ((aux = lee.readLine()) != null) {
                        texto += aux + "\n";
                        existe = true;
                    }
                    lee.close();
                    archivos.close();
                }

                txtCode.setText(new String(texto.getBytes("UTF-8")));
            } else {
                JOptionPane.showMessageDialog(null, "Solo se acepta formato .txt", "ERROR", 0);
            }

            if (status == JFileChooser.CANCEL_OPTION) {
                JOptionPane.showMessageDialog(null, "No eligio ningun archivo", "Error", 0);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex + ""
                    + "\nNo se ha encontrado el archivo", "ADVERTENCIA!!!",
                    JOptionPane.WARNING_MESSAGE);
        } catch (NullPointerException ex) {
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        DefaultTableModel modelo = (DefaultTableModel) TblAnalisis.getModel();
        modelo.setRowCount(0);
        try {
            String codigo = txtCode.getText();
            String tok = "";
            int lin = 0;
            String lex = "";
            Reader reader = new BufferedReader(new BufferedReader(new StringReader(codigo)));
            AnalizadorLexico lexico = new AnalizadorLexico(reader);
            lexico.estilo.insertarCodigoPane(txtCode);
            while (true) {
                lexico.next_token();
                if (lexico.yytext().equals("")) {
                    break;
                }
                lin = lexico.numLinea() + 1;
                tok = lexico.nameToken;
                lex = lexico.yytext();

                Object[] row1 = {lin, tok, lex};
                modelo.addRow(row1);

            }
            txtCode = lexico.estilo.componente;

        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        TblAnalisis.setModel(modelo);
        PnlToken.setVisible(true);
        splitPaneEC.setDividerLocation(0.70);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
  
        splitPaneCentral.getBottomComponent().setVisible(true);
        splitPaneCentral.setDividerLocation(0.60);

        txtErrores.setText("");
        String codigo = txtCode.getText();
        Reader reader = new BufferedReader(new BufferedReader(new StringReader(codigo)));
        AnalizadorLexico lexico;
        AnalizadorSintactico sintactico;

        if (errorLexico() == true) {
            JOptionPane.showMessageDialog(null, "Errores lexicos");
        } else {
            lexico = new AnalizadorLexico(reader);
            lexico.estilo.insertarCodigoPane(txtCode);
            sintactico = new AnalizadorSintactico(lexico);

            try {

                sintactico.parse();
                arbolSintactico = sintactico.nodoPrincipal;
                generarArbolSintaxis(sintactico);
                btnArbolSintaxis.setVisible(true);
                JOptionPane.showMessageDialog(null, "Análisis sintáctico finalizado correctamente");

                Pintar mensaje = new Pintar();
                mensaje.insertarCodigo("Análisis sintáctico terminó de forma correcta");
                mensaje.pintaAzulBold(0, mensaje.getTexto().length());
                txtErrores.setDocument(mensaje.componente.getDocument());

            } catch (Exception ex) {
                if (sintactico.charErrorDetec() != -1 && sintactico.charErrorDetec() != 0) {
                    int diezPorciento = (int) (codigo.substring(0, sintactico.charErrorDetec()).length() * 0.10);
                    System.out.println("10% = " + diezPorciento);
                    int tamTextoFinal = sintactico.estilo.getTexto().length();
                    String textoCargado = "";
                    try {
                        textoCargado = sintactico.estilo.doc.getText(0, tamTextoFinal);
                    } catch (BadLocationException ex1) {
                        Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                    String errores = "Error en codigo:\n\t..." + codigo.substring(diezPorciento, sintactico.charErrorDetec());
                    try {
                        sintactico.estilo.doc.insertString(tamTextoFinal, errores, null);
                    } catch (BadLocationException ex1) {
                        Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                    sintactico.estilo.pintaAzul(tamTextoFinal, (sintactico.estilo.getTexto() + errores).length());
                    txtErrores.setDocument(sintactico.estilo.componente.getDocument());
                }
                JOptionPane.showMessageDialog(null, "Error sintactico");

                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void generarArbolSintaxis(AnalizadorSintactico analisis) {
        Nodo raiz = analisis.nodoPrincipal;
        String datos = mapearArbolIni(raiz);
        String datos1 = mapearUnionesArbolIni(raiz);
        Graficar(datos + "\n" + datos1, "Arbol");
        abrirDiagrama();

    }

    private void abrirDiagrama() {
        try {
            String url = Paths.get(".").toAbsolutePath().normalize().toString();
            String path = url + "\\src\\img\\Arbol.png";
            System.out.println("path: " + path);
            ProcessBuilder p = new ProcessBuilder();
            p.command("cmd.exe", "/c", path);
            p.start();
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //inicializa los nodos para poder unir sin dupliciadad
    private String mapearArbolIni(Nodo raiz) {
        String datos = "";
        //es raiz?
        if (!raiz.getHojas().isEmpty()) {
            for (Nodo hoja : raiz.getHojas()) {
                datos += mapearArbolIni(hoja);
            }
            //raiz
            datos += inicializarNodo(raiz) + "\n";
        } else {
            //hojas
            datos = inicializarNodo(raiz) + "\n";
        }
        return datos;
    }

    //pone el formato para incializar
    private String inicializarNodo(Nodo n) {
        String datos = "";
        if (n.getValor().isEmpty()) {
            //Raiz
            datos = "node" + n.getNumeroGuia() + "[label=\"" + n.getNombreRaiz() + "\"]";
        } else {
            //Hoja
            if (n.getNombreRaiz().equals("VALOR_STRING")) {
                System.out.println("STRING = " + n.getValor());
                String valor = n.getValor().replace("\"", "");
                datos += "node" + n.getNumeroGuia() + "[label=\"" + n.getNombreRaiz() + "\n<" + valor + "> \"]";
            } else {
                datos += "node" + n.getNumeroGuia() + "[label=\"" + n.getNombreRaiz() + "\n<" + n.getValor() + ">\"]";
            }

        }
        return datos;
    }

    //Crea las uniones para graficar el arbol
    private String mapearUnionesArbolIni(Nodo raiz) {
        String datos = "";
        //es raiz?
        if (!raiz.getHojas().isEmpty()) {
            for (Nodo hoja : raiz.getHojas()) {
                datos += "node" + raiz.getNumeroGuia() + "->" + mapearUnionesArbolIni(hoja) + "\n";
            }
        } else {
            //hojas
            datos = "node" + raiz.getNumeroGuia();
        }
        return datos;
    }

    private void Graficar(String cadena, String cad) {

        FileWriter fichero = null;
        PrintWriter pw = null;
        String nombre = cad;
        String archivo = nombre + ".dot";
        String url = Paths.get(".").toAbsolutePath().normalize().toString();
        String path = url + "\\src\\img\\";
        File img = new File(url + "Arbol.png");
        try {
            fichero = new FileWriter(img);
            fichero = new FileWriter(path + archivo);
            pw = new PrintWriter(fichero);
            pw.println("digraph G {node[shape=box, style=filled, color=Gray95]; edge[color=blue];rankdir=UD \n");
            pw.println(cadena);
            pw.println("\n}");
            fichero.close();
            try {
                String cmd = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe -Tpng " + path + nombre + ".dot -o " + (path + cad) + ".png"; //Comando de apagado en linux
                Runtime.getRuntime().exec(cmd);
            } catch (IOException ioe) {
                System.out.println(ioe);
            }
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public static boolean moverArch(String archNombre) {
        boolean efectuado = false;

        File arch = new File(archNombre);
        if (arch.exists()) {
            System.out.println("\n*** Moviendo " + arch + " \n***");
            Path currentRelativePath = Paths.get("");
            String nuevoDir = currentRelativePath.toAbsolutePath().toString()
                    + File.separator + "src" + File.separator
                    + "Sintactico" + File.separator + arch.getName();
            File archViejo = new File(nuevoDir);
            archViejo.delete();
            if (arch.renameTo(new File(nuevoDir))) {
                System.out.println("\n*** Generado " + archNombre + "***\n");
                efectuado = true;

            } else {
                System.out.println("\n*** No movido " + archNombre + " ***\n");
            }

        } else {
            System.out.println("\n*** Codigo no existente ***\n");
        }
        return efectuado;
    }


    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed

        splitPaneCentral.getBottomComponent().setVisible(true);
        splitPaneCentral.setDividerLocation(0.80);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed

        splitPaneEC.getRightComponent().setVisible(true);
        splitPaneEC.setDividerLocation(0.70);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange

    }//GEN-LAST:event_formPropertyChange

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        txtErrores.setText("");
        AnalizadorSintactico sintactico_a = null;
        if (errorLexico() == true) {
            JOptionPane.showMessageDialog(null, "Existen errores léxicos.");
        } else {
            String codigo = txtCode.getText();
            Reader reader_a = new BufferedReader(new BufferedReader(new StringReader(codigo)));
            AnalizadorLexico lex = new AnalizadorLexico(reader_a);
            lex.estilo.insertarCodigoPane(txtCode);
            sintactico_a = new AnalizadorSintactico(lex);

            try {
                sintactico_a.parse();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Existen errores sintácticos");
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }
            AnalizadorSemantico semantico = new AnalizadorSemantico();

            semantico.rastrearProduccion("DECLARACION", sintactico_a.nodoPrincipal, "NOMBRE_VAR");
            semantico.rastrearProduccion("ASIGNACION", sintactico_a.nodoPrincipal, "NOMBRE_VAR");

            semantico.rastrearProduccion("DECL_ASIG_CICLO", sintactico_a.nodoPrincipal, "NOMBRE_VAR");
            semantico.rastrearProduccion("ASIGNACION_CICLO", sintactico_a.nodoPrincipal, "NOMBRE_VAR");
            semantico.rastrearProduccion("VARIABLE_DA", sintactico_a.nodoPrincipal, "NOMBRE_VAR");

            semantico.rastrearProduccion("TIPO_VALOR", sintactico_a.nodoPrincipal, "NOMBRE_VAR");
            semantico.rastrearProduccion("LEER_DATO", sintactico_a.nodoPrincipal, "NOMBRE_VAR");
            semantico.rastrearProduccion("ASIGNACION_INC_DEC", sintactico_a.nodoPrincipal, "NOMBRE_VAR");

            semantico.rastrearProduccion("CONDICION_BAJA", sintactico_a.nodoPrincipal, "NOMBRE_VAR");
            semantico.rastrearProduccion("CONDICION_MEDIA", sintactico_a.nodoPrincipal, "NOMBRE_VAR");
            semantico.rastrearProduccion("CONDICION_ALTA", sintactico_a.nodoPrincipal, "NOMBRE_VAR");

            if (semantico.listaErrores.isEmpty() == false) {
                splitPaneCentral.getBottomComponent().setVisible(true);
                splitPaneCentral.setDividerLocation(0.60);
                Pintar mensaje = new Pintar();
                String errores = "";
                for (int i = 0; i < semantico.listaErrores.size(); i++) {
                    errores = semantico.listaErrores.get(i) + "\n";
                }
                mensaje.insertarCodigo(errores);
                mensaje.pintaRojoFuerte(0, mensaje.getTexto().length());
                txtErrores.setDocument(mensaje.componente.getDocument());
            } else {
                JOptionPane.showMessageDialog(null, "Análisis semántico finalizado correctamente");
            }

        }
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void btnArbolSintaxisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArbolSintaxisActionPerformed
        abrirDiagrama();
    }//GEN-LAST:event_btnArbolSintaxisActionPerformed

    private void txtCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodeKeyTyped

    }//GEN-LAST:event_txtCodeKeyTyped

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
 if (this.arbolSintactico != null) {
            CodigoIntermedio ci = new CodigoIntermedio();
            ci.recorrerArbolSintactico(this.arbolSintactico);
            ci.imprimirCodigo();
            vizCodigo vCodigo = new vizCodigo(ci.getCodigo());
            vCodigo.show();
        }else{
            JOptionPane.showMessageDialog(null, "El código debe ser evaluado antes de iniciar\neste proceso.");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem16ActionPerformed


    private boolean errorLexico() {
        String codigo = txtCode.getText();

        Reader reader = new BufferedReader(new BufferedReader(new StringReader(codigo)));

        AnalizadorLexico lexico = new AnalizadorLexico(reader);
        lexico.estilo.insertarCodigoPane(txtCode);
        while (true) {
            try {
                lexico.next_token();
                if (lexico.yytext().equals("")) {
                    break;
                }
                if (lexico.nameToken.equals("ERROR")) {
                    return true;
                }
            } catch (IOException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        return false;
    }

    private void abrirArchivoCodigo(String nombreArchivo, JTextPane txt) {
        this.arbolSintactico = null;
        String url = Paths.get(".").toAbsolutePath().normalize().toString();
        String path = url + "\\src\\ejemplos\\" + nombreArchivo;
        String aux = "";
        String texto = "";
        boolean existe;
        try {
            File archivo = new File(path);
            FileReader archivos = new FileReader(archivo);
            BufferedReader lee = new BufferedReader(archivos);
            try {
                while ((aux = lee.readLine()) != null) {
                    texto += aux + "\n";
                    existe = true;
                }
            } catch (IOException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }
            lee.close();
            archivos.close();
            txt.setText(texto);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    class ThreadNumberCode extends Thread {

        private String salto = System.getProperty("line.separator");

        @Override
        public void run() {
            while (true) {
                try {
                    String lineas = txtCode.getText();
                    int l = recorrerCaracteres(lineas);
                    String numeros = "";
                    for (int i = 1; i <= l; i++) {
                        numeros += i + "\n";
                    }
                    txtNumLinea.setText(numeros);
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        private int recorrerCaracteres(String codigo) {
            int s = 1;
            for (int i = 0; i < codigo.length(); i++) {
                int c = codigo.charAt(i);
                if (c == 10) {
                    s++;
                }
            }
            return s;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                //System.out.println(info.getName());
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());

                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelControlesSintactico;
    private javax.swing.JPanel PnlToken;
    private javax.swing.JTable TblAnalisis;
    private javax.swing.JButton btnArbolSintaxis;
    private javax.swing.JPanel consola;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel panelEditor;
    private javax.swing.JSplitPane splitPaneCentral;
    private javax.swing.JSplitPane splitPaneEC;
    private javax.swing.JTextPane txtCode;
    private javax.swing.JTextPane txtErrores;
    private javax.swing.JTextPane txtNumLinea;
    // End of variables declaration//GEN-END:variables
}
